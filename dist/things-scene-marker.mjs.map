{"version":3,"file":"things-scene-marker.mjs","sources":["../src/legend.js","../src/legend-item.js"],"sourcesContent":["/*\n * Copyright © HatioLab Inc. All rights reserved.\n */\nimport { Model, Component, Container, TableLayout } from '@hatiolab/things-scene'\n\nconst NATURE = {\n  mutable: false,\n  resizable: true,\n  rotatable: true,\n  properties: [{\n    type: 'number',\n    label: 'rows',\n    name: 'rows'\n  }, {\n    type: 'number',\n    label: 'columns',\n    name: 'columns'\n  }, {\n    type: 'select',\n    label: 'direction',\n    name: 'direction',\n    property: {\n      options: [{\n        display: 'Horizontal',\n        value: 'horizontal'\n      }, {\n        display: 'Vertical',\n        value: 'vertical'\n      }]\n    }\n  }, {\n    type: 'number',\n    label: 'round',\n    name: 'round'\n  }, {\n    type: 'legend-status',\n    label: '',\n    name: 'status'\n  }]\n}\n\nvar controlHandler = {\n\n  ondragmove: function (point, index, component) {\n\n    var { left, top, width, height } = component.model\n    /*\n      * point의 좌표는 부모 레이어 기준의 x, y 값이다.\n      * 따라서, 도형의 회전을 감안한 좌표로의 변환이 필요하다.\n      * Transcoord시에는 point좌표가 부모까지 transcoord되어있는 상태이므로,\n      * 컴포넌트자신에 대한 transcoord만 필요하다.(마지막 파라미터를 false로).\n      */\n    var transcoorded = component.transcoordP2S(point.x, point.y)\n    var round = (transcoorded.x - left) / (width / 2) * 100\n\n    round = roundSet(round, width, height)\n\n    component.set({ round })\n  }\n}\n\nfunction roundSet(round, width, height) {\n  var max = width > height ? (height / width) * 100 : 100\n\n  if (round >= max)\n    round = max\n  else if (round <= 0)\n    round = 0\n\n  return round\n}\n\nexport default class Legend extends Container {\n\n  ready() {\n    this.rebuildLegendItems()\n  }\n\n  get showMoveHandle() {\n    return false;\n  }\n\n  render(context) {\n\n    var {\n      round = 0\n    } = this.model\n\n    var {\n      left,\n      top,\n      width,\n      height\n    } = this.bounds\n\n    // 박스 그리기\n    context.beginPath();\n\n    round = roundSet(round, width, height)\n\n    if (round > 0) {\n      var radius = (round / 100) * (width / 2)\n\n      context.moveTo(left + radius, top);\n      context.lineTo(left + width - radius, top);\n      context.quadraticCurveTo(left + width, top, left + width, top + radius);\n      context.lineTo(left + width, top + height - radius);\n      context.quadraticCurveTo(left + width, top + height, left + width - radius, top + height);\n      context.lineTo(left + radius, top + height);\n      context.quadraticCurveTo(left, top + height, left, top + height - radius);\n      context.lineTo(left, top + radius);\n      context.quadraticCurveTo(left, top, left + radius, top);\n\n      this.model.padding = {\n        top: round / 2,\n        left: round / 2,\n        right: round / 2,\n        bottom: round / 2\n      }\n\n    } else {\n      context.rect(left, top, width, height);\n    }\n\n    this.drawFill(context);\n    this.drawStroke(context);\n  }\n\n  get controls() {\n\n    var { left, top, width, round, height } = this.model;\n    round = round == undefined ? 0 : roundSet(round, width, height)\n\n    return [{\n      x: left + (width / 2) * (round / 100),\n      y: top,\n      handler: controlHandler\n    }]\n  }\n\n  get layout() {\n    return TableLayout\n  }\n\n  get nature() {\n    return NATURE;\n  }\n\n  rebuildLegendItems() {\n\n    if (this.components.length)\n      this.components.slice().forEach(m => m.dispose())\n\n    var {\n      left,\n      top,\n      width,\n      height,\n      fillStyle,\n      strokeStyle,\n      fontColor,\n      fontFamily,\n      fontSize,\n      lineHeight,\n      textAlign = 'left',\n      round = 0,\n      italic,\n      bold,\n      lineWidth = 0,\n      rows,\n      columns,\n      status = {}\n    } = this.model\n\n    let statusRanges = status.ranges || []\n\n    var count = statusRanges.length\n\n    this.add(statusRanges.map(range => Model.compile({\n      type: 'legend-item',\n      text: range.description || `${range.min || ''} ~ ${range.max || ''}`,\n      width: 1,\n      height: 1,\n      color: range.color,\n      fontColor,\n      fontFamily,\n      fontSize,\n      lineHeight,\n      italic,\n      bold,\n      textAlign\n    })))\n\n    var rows, columns\n\n    if (!columns && !rows) {\n      rows = count\n      columns = 1\n    } else if (columns && !rows) {\n      rows = Math.ceil(count / Number(columns))\n    } else if (rows && !columns) {\n      columns = Math.ceil(count / Number(rows))\n    }\n\n    this.set({\n      layoutConfig: {\n        rows, columns\n      }\n    })\n  }\n\n  get hasTextProperty() {\n    return true\n  }\n\n  get textHidden() {\n    return true\n  }\n\n  onchange(after, before) {\n\n    this.rebuildLegendItems()\n  }\n}\n\nComponent.register('legend', Legend);\n","/*\n * Copyright © HatioLab Inc. All rights reserved.\n */\nimport { Model, Component, RectPath, Shape } from '@hatiolab/things-scene'\n\nconst NATURE = {\n  mutable: false,\n  resizable: false,\n  rotatable: false,\n  properties: []\n}\n\nexport default class LegendItem extends RectPath(Shape) {\n\n  render(context) {\n    var {\n      left,\n      top,\n      height,\n      color\n    } = this.model\n\n    context.beginPath();\n\n    var c = height / 2\n    var r = c / 2\n\n    context.save()\n\n    context.fillStyle = color\n    context.ellipse(left + c, top + c, r, r, 0, 0, Math.PI * 2, true)\n    context.shadowColor = 'rgba(0,0,0,0.15)';\n    context.shadowBlur = 2;\n    context.shadowOffsetX = 1;\n    context.shadowOffsetY = 2;\n    context.fill()\n\n    context.restore()\n  }\n\n  onchange(after) {\n    if (after.hasOwnProperty('height'))\n      this.set('paddingLeft', after.height)\n  }\n\n  get stuck() {\n    return true;\n  }\n\n  get capturable() {\n    return false\n  }\n\n  get nature() {\n    return NATURE;\n  }\n}\n\nComponent.register('legend-item', LegendItem);\n"],"names":["NATURE","mutable","resizable","rotatable","properties","type","label","name","property","options","display","value","controlHandler","ondragmove","point","index","component","left","top","width","height","model","round","transcoordP2S","x","y","roundSet","set","max","Legend","Container","ready","rebuildLegendItems","render","context","this","bounds","beginPath","radius","moveTo","lineTo","quadraticCurveTo","padding","right","bottom","rect","drawFill","drawStroke","undefined","handler","TableLayout","components","length","slice","forEach","m","dispose","fillStyle","strokeStyle","fontColor","fontFamily","fontSize","lineHeight","textAlign","italic","bold","lineWidth","rows","columns","status","statusRanges","ranges","count","add","map","range","Model","compile","text","description","min","color","Math","ceil","Number","layoutConfig","onchange","after","before","Component","register","LegendItem","RectPath","Shape","c","r","save","ellipse","PI","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","fill","restore","hasOwnProperty"],"mappings":"uHAGA,MAEMA,EAAS,CACbC,SAAS,EACTC,WAAW,EACXC,WAAW,EACXC,WAAY,CAAC,CACXC,KAAM,SACNC,MAAO,OACPC,KAAM,QACL,CACDF,KAAM,SACNC,MAAO,UACPC,KAAM,WACL,CACDF,KAAM,SACNC,MAAO,YACPC,KAAM,YACNC,SAAU,CACRC,QAAS,CAAC,CACRC,QAAS,aACTC,MAAO,cACN,CACDD,QAAS,WACTC,MAAO,eAGV,CACDN,KAAM,SACNC,MAAO,QACPC,KAAM,SACL,CACDF,KAAM,gBACNC,MAAO,GACPC,KAAM,YAIV,IAAIK,EAAiB,CAEnBC,WAAY,SAAUC,EAAOC,EAAOC,OAE9BC,KAAEA,EAAFC,IAAQA,EAARC,MAAaA,EAAbC,OAAoBA,GAAWJ,EAAUK,MAQzCC,GADeN,EAAUO,cAAcT,EAAMU,EAAGV,EAAMW,GAChCD,EAAIP,IAASE,EAAQ,GAAK,IAEpDG,EAAQI,EAASJ,EAAOH,EAAOC,GAE/BJ,EAAUW,IAAI,CAAEL,MAAAA,MAIpB,SAASI,EAASJ,EAAOH,EAAOC,OAC1BQ,EAAMT,EAAQC,EAAUA,EAASD,EAAS,IAAM,WAEhDG,GAASM,EACXN,EAAQM,EACDN,GAAS,IAChBA,EAAQ,GAEHA,EAGM,MAAMO,UAAeC,EAElCC,aACOC,iDAIE,EAGTC,OAAOC,OAEDZ,MACFA,EAAQ,GACNa,KAAKd,OAELJ,KACFA,EADEC,IAEFA,EAFEC,MAGFA,EAHEC,OAIFA,GACEe,KAAKC,UAGTF,EAAQG,aAERf,EAAQI,EAASJ,EAAOH,EAAOC,IAEnB,EAAG,KACTkB,EAAUhB,EAAQ,KAAQH,EAAQ,GAEtCe,EAAQK,OAAOtB,EAAOqB,EAAQpB,GAC9BgB,EAAQM,OAAOvB,EAAOE,EAAQmB,EAAQpB,GACtCgB,EAAQO,iBAAiBxB,EAAOE,EAAOD,EAAKD,EAAOE,EAAOD,EAAMoB,GAChEJ,EAAQM,OAAOvB,EAAOE,EAAOD,EAAME,EAASkB,GAC5CJ,EAAQO,iBAAiBxB,EAAOE,EAAOD,EAAME,EAAQH,EAAOE,EAAQmB,EAAQpB,EAAME,GAClFc,EAAQM,OAAOvB,EAAOqB,EAAQpB,EAAME,GACpCc,EAAQO,iBAAiBxB,EAAMC,EAAME,EAAQH,EAAMC,EAAME,EAASkB,GAClEJ,EAAQM,OAAOvB,EAAMC,EAAMoB,GAC3BJ,EAAQO,iBAAiBxB,EAAMC,EAAKD,EAAOqB,EAAQpB,QAE9CG,MAAMqB,QAAU,CACnBxB,IAAKI,EAAQ,EACbL,KAAMK,EAAQ,EACdqB,MAAOrB,EAAQ,EACfsB,OAAQtB,EAAQ,QAIlBY,EAAQW,KAAK5B,EAAMC,EAAKC,EAAOC,QAG5B0B,SAASZ,QACTa,WAAWb,sBAKZjB,KAAEA,EAAFC,IAAQA,EAARC,MAAaA,EAAbG,MAAoBA,EAApBF,OAA2BA,GAAWe,KAAKd,YAGxC,CAAC,CACNG,EAAGP,EAAQE,EAAQ,IAHrBG,EAAiB0B,MAAT1B,EAAqB,EAAII,EAASJ,EAAOH,EAAOC,IAGrB,KACjCK,EAAGP,EACH+B,QAASrC,wBAKJsC,sBAIAlD,EAGTgC,qBAEMG,KAAKgB,WAAWC,QAClBjB,KAAKgB,WAAWE,QAAQC,QAAQC,GAAKA,EAAEC,eAErCvC,KACFA,EADEC,IAEFA,EAFEC,MAGFA,EAHEC,OAIFA,EAJEqC,UAKFA,EALEC,YAMFA,EANEC,UAOFA,EAPEC,WAQFA,EAREC,SASFA,EATEC,WAUFA,EAVEC,UAWFA,EAAY,OAXVzC,MAYFA,EAAQ,EAZN0C,OAaFA,EAbEC,KAcFA,EAdEC,UAeFA,EAAY,EAfVC,KAgBFA,EAhBEC,QAiBFA,EAjBEC,OAkBFA,EAAS,IACPlC,KAAKd,UAELiD,EAAeD,EAAOE,QAAU,OAmBhCJ,EAAMC,EAjBNI,EAAQF,EAAalB,YAEpBqB,IAAIH,EAAaI,IAAIC,GAASC,EAAMC,QAAQ,CAC/CxE,KAAM,cACNyE,KAAMH,EAAMI,gBAAkBJ,EAAMK,KAAO,QAAQL,EAAM/C,KAAO,KAChET,MAAO,EACPC,OAAQ,EACR6D,MAAON,EAAMM,MACbtB,UAAAA,EACAC,WAAAA,EACAC,SAAAA,EACAC,WAAAA,EACAE,OAAAA,EACAC,KAAAA,EACAF,UAAAA,MAKGK,GAAYD,EAGNC,IAAYD,EACrBA,EAAOe,KAAKC,KAAKX,EAAQY,OAAOhB,IACvBD,IAASC,IAClBA,EAAUc,KAAKC,KAAKX,EAAQY,OAAOjB,MALnCA,EAAOK,EACPJ,EAAU,QAOPzC,IAAI,CACP0D,aAAc,CACZlB,KAAAA,EAAMC,QAAAA,kCAMH,0BAIA,EAGTkB,SAASC,EAAOC,QAETxD,sBAITyD,EAAUC,SAAS,SAAU7D,GC9N7B,MAEM7B,EAAS,CACbC,SAAS,EACTC,WAAW,EACXC,WAAW,EACXC,WAAY,IAGC,MAAMuF,UAAmBC,EAASC,IAE/C5D,OAAOC,OACDjB,KACFA,EADEC,IAEFA,EAFEE,OAGFA,EAHE6D,MAIFA,GACE9C,KAAKd,MAETa,EAAQG,gBAEJyD,EAAI1E,EAAS,EACb2E,EAAID,EAAI,EAEZ5D,EAAQ8D,OAER9D,EAAQuB,UAAYwB,EACpB/C,EAAQ+D,QAAQhF,EAAO6E,EAAG5E,EAAM4E,EAAGC,EAAGA,EAAG,EAAG,EAAa,EAAVb,KAAKgB,IAAQ,GAC5DhE,EAAQiE,YAAc,mBACtBjE,EAAQkE,WAAa,EACrBlE,EAAQmE,cAAgB,EACxBnE,EAAQoE,cAAgB,EACxBpE,EAAQqE,OAERrE,EAAQsE,UAGVlB,SAASC,GACHA,EAAMkB,eAAe,WACvBtE,KAAKR,IAAI,cAAe4D,EAAMnE,2BAIzB,0BAIA,sBAIApB,GAIXyF,EAAUC,SAAS,cAAeC"}